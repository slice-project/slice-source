/*
 * generated by Xtext
 */
package org.etri.slice.tools.adl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class DomainmodelGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.DomainModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportSectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_0_0 = (RuleCall)cImportSectionAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//DomainModel:
		//	importSection=XImportSection?
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//importSection=XImportSection? elements+=AbstractElement*
		public Group getGroup() { return cGroup; }
		
		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_0() { return cImportSectionAssignment_0; }
		
		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_0_0() { return cImportSectionXImportSectionParserRuleCall_0_0; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_1_0() { return cElementsAbstractElementParserRuleCall_1_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDomainDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExceptionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cControlParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAgentDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//AbstractElement:
		//	DomainDeclaration | Context | Event | Exception | Control | AgentDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//DomainDeclaration | Context | Event | Exception | Control | AgentDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DomainDeclaration
		public RuleCall getDomainDeclarationParserRuleCall_0() { return cDomainDeclarationParserRuleCall_0; }
		
		//Context
		public RuleCall getContextParserRuleCall_1() { return cContextParserRuleCall_1; }
		
		//Event
		public RuleCall getEventParserRuleCall_2() { return cEventParserRuleCall_2; }
		
		//Exception
		public RuleCall getExceptionParserRuleCall_3() { return cExceptionParserRuleCall_3; }
		
		//Control
		public RuleCall getControlParserRuleCall_4() { return cControlParserRuleCall_4; }
		
		//AgentDeclaration
		public RuleCall getAgentDeclarationParserRuleCall_5() { return cAgentDeclarationParserRuleCall_5; }
	}
	public class DomainDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.DomainDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsAbstractElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DomainDeclaration:
		//	'domain' name=QualifiedName '{'
		//	elements+=AbstractElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'domain' name=QualifiedName '{' elements+=AbstractElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_3_0() { return cElementsAbstractElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cSuperTypeAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Context:
		//	'context' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? '{'
		//	properties+=Property*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'context' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? '{' properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//('extends' superType=JvmParameterizedTypeReference)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=JvmParameterizedTypeReference
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//JvmParameterizedTypeReference
		public RuleCall getSuperTypeJvmParameterizedTypeReferenceParserRuleCall_2_1_0() { return cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_4_0() { return cPropertiesPropertyParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTopicAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTopicTopicParserRuleCall_0_0 = (RuleCall)cTopicAssignment_0.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cSuperTypeAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_0 = (RuleCall)cPropertiesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Event:
		//	topic=Topic
		//	'event' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? '{'
		//	properties+=Property*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//topic=Topic 'event' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? '{' properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//topic=Topic
		public Assignment getTopicAssignment_0() { return cTopicAssignment_0; }
		
		//Topic
		public RuleCall getTopicTopicParserRuleCall_0_0() { return cTopicTopicParserRuleCall_0_0; }
		
		//'event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//('extends' superType=JvmParameterizedTypeReference)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//superType=JvmParameterizedTypeReference
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }
		
		//JvmParameterizedTypeReference
		public RuleCall getSuperTypeJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_5() { return cPropertiesAssignment_5; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_0() { return cPropertiesPropertyParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EventBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.EventBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTopicAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTopicTopicParserRuleCall_0_0 = (RuleCall)cTopicAssignment_0.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cSuperTypeAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_0 = (RuleCall)cPropertiesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EventBody:
		//	topic=Topic
		//	'event' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? '{'
		//	properties+=Property*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//topic=Topic 'event' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? '{' properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//topic=Topic
		public Assignment getTopicAssignment_0() { return cTopicAssignment_0; }
		
		//Topic
		public RuleCall getTopicTopicParserRuleCall_0_0() { return cTopicTopicParserRuleCall_0_0; }
		
		//'event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//('extends' superType=JvmParameterizedTypeReference)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//superType=JvmParameterizedTypeReference
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }
		
		//JvmParameterizedTypeReference
		public RuleCall getSuperTypeJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_5() { return cPropertiesAssignment_5; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_0() { return cPropertiesPropertyParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Exception");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cSuperTypeAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Exception:
		//	'exception' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'exception' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? ';'
		public Group getGroup() { return cGroup; }
		
		//'exception'
		public Keyword getExceptionKeyword_0() { return cExceptionKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//('extends' superType=JvmParameterizedTypeReference)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=JvmParameterizedTypeReference
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//JvmParameterizedTypeReference
		public RuleCall getSuperTypeJvmParameterizedTypeReferenceParserRuleCall_2_1_0() { return cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Control");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cSuperTypesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_2_2_1_0 = (RuleCall)cSuperTypesAssignment_2_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Control:
		//	'control' name=ValidID ('extends' superTypes+=JvmParameterizedTypeReference (','
		//	superTypes+=JvmParameterizedTypeReference)*)? '{'
		//	features+=Feature*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'control' name=ValidID ('extends' superTypes+=JvmParameterizedTypeReference (','
		//superTypes+=JvmParameterizedTypeReference)*)? '{' features+=Feature* '}'
		public Group getGroup() { return cGroup; }
		
		//'control'
		public Keyword getControlKeyword_0() { return cControlKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//('extends' superTypes+=JvmParameterizedTypeReference (',' superTypes+=JvmParameterizedTypeReference)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superTypes+=JvmParameterizedTypeReference
		public Assignment getSuperTypesAssignment_2_1() { return cSuperTypesAssignment_2_1; }
		
		//JvmParameterizedTypeReference
		public RuleCall getSuperTypesJvmParameterizedTypeReferenceParserRuleCall_2_1_0() { return cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_2_1_0; }
		
		//(',' superTypes+=JvmParameterizedTypeReference)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//superTypes+=JvmParameterizedTypeReference
		public Assignment getSuperTypesAssignment_2_2_1() { return cSuperTypesAssignment_2_2_1; }
		
		//JvmParameterizedTypeReference
		public RuleCall getSuperTypesJvmParameterizedTypeReferenceParserRuleCall_2_2_1_0() { return cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_2_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//features+=Feature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_4_0() { return cFeaturesFeatureParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AgentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.AgentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAgencyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAgencyAgencyParserRuleCall_0_0 = (RuleCall)cAgencyAssignment_0.eContents().get(0);
		private final Keyword cAgentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRuleSetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRuleSetRuleSetParserRuleCall_4_0 = (RuleCall)cRuleSetAssignment_4.eContents().get(0);
		private final Assignment cBehaviorSetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBehaviorSetBehaviorSetParserRuleCall_5_0 = (RuleCall)cBehaviorSetAssignment_5.eContents().get(0);
		private final Assignment cCommandSetsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCommandSetsCommandSetParserRuleCall_6_0 = (RuleCall)cCommandSetsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AgentDeclaration:
		//	agency=Agency
		//	'agent' name=ValidID '{'
		//	ruleSet=RuleSet
		//	behaviorSet=BehaviorSet
		//	commandSets+=CommandSet*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//agency=Agency 'agent' name=ValidID '{' ruleSet=RuleSet behaviorSet=BehaviorSet commandSets+=CommandSet* '}'
		public Group getGroup() { return cGroup; }
		
		//agency=Agency
		public Assignment getAgencyAssignment_0() { return cAgencyAssignment_0; }
		
		//Agency
		public RuleCall getAgencyAgencyParserRuleCall_0_0() { return cAgencyAgencyParserRuleCall_0_0; }
		
		//'agent'
		public Keyword getAgentKeyword_1() { return cAgentKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//ruleSet=RuleSet
		public Assignment getRuleSetAssignment_4() { return cRuleSetAssignment_4; }
		
		//RuleSet
		public RuleCall getRuleSetRuleSetParserRuleCall_4_0() { return cRuleSetRuleSetParserRuleCall_4_0; }
		
		//behaviorSet=BehaviorSet
		public Assignment getBehaviorSetAssignment_5() { return cBehaviorSetAssignment_5; }
		
		//BehaviorSet
		public RuleCall getBehaviorSetBehaviorSetParserRuleCall_5_0() { return cBehaviorSetBehaviorSetParserRuleCall_5_0; }
		
		//commandSets+=CommandSet*
		public Assignment getCommandSetsAssignment_6() { return cCommandSetsAssignment_6; }
		
		//CommandSet
		public RuleCall getCommandSetsCommandSetParserRuleCall_6_0() { return cCommandSetsCommandSetParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class RuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.RuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasRuleSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cGroupIdKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGroup_idAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGroup_idSTRINGTerminalRuleCall_4_0 = (RuleCall)cGroup_idAssignment_4.eContents().get(0);
		private final Keyword cArtifactIdKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cArtifact_idAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cArtifact_idSTRINGTerminalRuleCall_6_0 = (RuleCall)cArtifact_idAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RuleSet:
		//	'hasRuleSet' name=ValidID '{'
		//	'group-id' group_id=STRING
		//	'artifact-id' artifact_id=STRING
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'hasRuleSet' name=ValidID '{' 'group-id' group_id=STRING 'artifact-id' artifact_id=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'hasRuleSet'
		public Keyword getHasRuleSetKeyword_0() { return cHasRuleSetKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'group-id'
		public Keyword getGroupIdKeyword_3() { return cGroupIdKeyword_3; }
		
		//group_id=STRING
		public Assignment getGroup_idAssignment_4() { return cGroup_idAssignment_4; }
		
		//STRING
		public RuleCall getGroup_idSTRINGTerminalRuleCall_4_0() { return cGroup_idSTRINGTerminalRuleCall_4_0; }
		
		//'artifact-id'
		public Keyword getArtifactIdKeyword_5() { return cArtifactIdKeyword_5; }
		
		//artifact_id=STRING
		public Assignment getArtifact_idAssignment_6() { return cArtifact_idAssignment_6; }
		
		//STRING
		public RuleCall getArtifact_idSTRINGTerminalRuleCall_6_0() { return cArtifact_idSTRINGTerminalRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class BehaviorSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.BehaviorSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasBehaviorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBehaviorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBehaviorsBehaviorParserRuleCall_2_0 = (RuleCall)cBehaviorsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BehaviorSet:
		//	'hasBehaviors' '{'
		//	behaviors+=Behavior+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'hasBehaviors' '{' behaviors+=Behavior+ '}'
		public Group getGroup() { return cGroup; }
		
		//'hasBehaviors'
		public Keyword getHasBehaviorsKeyword_0() { return cHasBehaviorsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//behaviors+=Behavior+
		public Assignment getBehaviorsAssignment_2() { return cBehaviorsAssignment_2; }
		
		//Behavior
		public RuleCall getBehaviorsBehaviorParserRuleCall_2_0() { return cBehaviorsBehaviorParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSituationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSituationSituationParserRuleCall_2_0 = (RuleCall)cSituationAssignment_2.eContents().get(0);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionActionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Behavior:
		//	'behavior' name=STRING
		//	situation=Situation
		//	action=Action
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'behavior' name=STRING situation=Situation action=Action 'end'
		public Group getGroup() { return cGroup; }
		
		//'behavior'
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//situation=Situation
		public Assignment getSituationAssignment_2() { return cSituationAssignment_2; }
		
		//Situation
		public RuleCall getSituationSituationParserRuleCall_2_0() { return cSituationSituationParserRuleCall_2_0; }
		
		//action=Action
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_3_0() { return cActionActionParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class CommandSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.CommandSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasCommandsOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cControlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cControlJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cControlAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CommandSet:
		//	'hasCommandsOf' control=JvmTypeReference '{'
		//	commands+=Command+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'hasCommandsOf' control=JvmTypeReference '{' commands+=Command+ '}'
		public Group getGroup() { return cGroup; }
		
		//'hasCommandsOf'
		public Keyword getHasCommandsOfKeyword_0() { return cHasCommandsOfKeyword_0; }
		
		//control=JvmTypeReference
		public Assignment getControlAssignment_1() { return cControlAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getControlJvmTypeReferenceParserRuleCall_1_0() { return cControlJvmTypeReferenceParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//commands+=Command+
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_0() { return cCommandsCommandParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContextsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContextsCommandContextParserRuleCall_3_0 = (RuleCall)cContextsAssignment_3.eContents().get(0);
		private final Keyword cActionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cActionJvmTypeCrossReference_5_0 = (CrossReference)cActionAssignment_5.eContents().get(0);
		private final RuleCall cActionJvmTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cActionJvmTypeCrossReference_5_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMethodAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMethodValidIDParserRuleCall_7_0 = (RuleCall)cMethodAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Command:
		//	'command' name=ValidID '{'
		//	contexts+=CommandContext+
		//	'action' action=[JvmType] '.' method=ValidID
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'command' name=ValidID '{' contexts+=CommandContext+ 'action' action=[JvmType] '.' method=ValidID '}'
		public Group getGroup() { return cGroup; }
		
		//'command'
		public Keyword getCommandKeyword_0() { return cCommandKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//contexts+=CommandContext+
		public Assignment getContextsAssignment_3() { return cContextsAssignment_3; }
		
		//CommandContext
		public RuleCall getContextsCommandContextParserRuleCall_3_0() { return cContextsCommandContextParserRuleCall_3_0; }
		
		//'action'
		public Keyword getActionKeyword_4() { return cActionKeyword_4; }
		
		//action=[JvmType]
		public Assignment getActionAssignment_5() { return cActionAssignment_5; }
		
		//[JvmType]
		public CrossReference getActionJvmTypeCrossReference_5_0() { return cActionJvmTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getActionJvmTypeIDTerminalRuleCall_5_0_1() { return cActionJvmTypeIDTerminalRuleCall_5_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//method=ValidID
		public Assignment getMethodAssignment_7() { return cMethodAssignment_7; }
		
		//ValidID
		public RuleCall getMethodValidIDParserRuleCall_7_0() { return cMethodValidIDParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class CommandContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.CommandContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContextJvmTypeCrossReference_1_0 = (CrossReference)cContextAssignment_1.eContents().get(0);
		private final RuleCall cContextJvmTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cContextJvmTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyValidIDParserRuleCall_3_0 = (RuleCall)cPropertyAssignment_3.eContents().get(0);
		
		//CommandContext:
		//	'context' context=[JvmType] '.' property=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' context=[JvmType] '.' property=ValidID
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//context=[JvmType]
		public Assignment getContextAssignment_1() { return cContextAssignment_1; }
		
		//[JvmType]
		public CrossReference getContextJvmTypeCrossReference_1_0() { return cContextJvmTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getContextJvmTypeIDTerminalRuleCall_1_0_1() { return cContextJvmTypeIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//property=ValidID
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }
		
		//ValidID
		public RuleCall getPropertyValidIDParserRuleCall_3_0() { return cPropertyValidIDParserRuleCall_3_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataType:
		//	Context | Event;
		@Override public ParserRule getRule() { return rule; }
		
		//Context | Event
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Context
		public RuleCall getContextParserRuleCall_0() { return cContextParserRuleCall_0; }
		
		//Event
		public RuleCall getEventParserRuleCall_1() { return cEventParserRuleCall_1; }
	}
	public class SituationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Situation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypesJvmTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cTypesAssignment_2_1.eContents().get(0);
		
		//Situation:
		//	'on' types+=JvmTypeReference (',' types+=JvmTypeReference)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' types+=JvmTypeReference (',' types+=JvmTypeReference)*
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//types+=JvmTypeReference
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getTypesJvmTypeReferenceParserRuleCall_1_0() { return cTypesJvmTypeReferenceParserRuleCall_1_0; }
		
		//(',' types+=JvmTypeReference)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//types+=JvmTypeReference
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }
		
		//JvmTypeReference
		public RuleCall getTypesJvmTypeReferenceParserRuleCall_2_1_0() { return cTypesJvmTypeReferenceParserRuleCall_2_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cPublishParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cCallParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cNoOpParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//Action:
		//	'do' (Publish | Call | NoOp);
		@Override public ParserRule getRule() { return rule; }
		
		//'do' (Publish | Call | NoOp)
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//Publish | Call | NoOp
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Publish
		public RuleCall getPublishParserRuleCall_1_0() { return cPublishParserRuleCall_1_0; }
		
		//Call
		public RuleCall getCallParserRuleCall_1_1() { return cCallParserRuleCall_1_1; }
		
		//NoOp
		public RuleCall getNoOpParserRuleCall_1_2() { return cNoOpParserRuleCall_1_2; }
	}
	public class PublishElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Publish");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cActionPublishKeyword_0_0 = (Keyword)cActionAssignment_0.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		
		//Publish:
		//	action='publish' event=JvmTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//action='publish' event=JvmTypeReference
		public Group getGroup() { return cGroup; }
		
		//action='publish'
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//'publish'
		public Keyword getActionPublishKeyword_0_0() { return cActionPublishKeyword_0_0; }
		
		//event=JvmTypeReference
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getEventJvmTypeReferenceParserRuleCall_1_0() { return cEventJvmTypeReferenceParserRuleCall_1_0; }
	}
	public class NoOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.NoOp");
		private final Assignment cActionAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cActionNoOpKeyword_0 = (Keyword)cActionAssignment.eContents().get(0);
		
		//NoOp:
		//	action='no-op';
		@Override public ParserRule getRule() { return rule; }
		
		//action='no-op'
		public Assignment getActionAssignment() { return cActionAssignment; }
		
		//'no-op'
		public Keyword getActionNoOpKeyword_0() { return cActionNoOpKeyword_0; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cActionCallKeyword_0_0 = (Keyword)cActionAssignment_0.eContents().get(0);
		private final Assignment cControlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cControlJvmTypeCrossReference_1_0 = (CrossReference)cControlAssignment_1.eContents().get(0);
		private final RuleCall cControlJvmTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cControlJvmTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodValidIDParserRuleCall_3_0 = (RuleCall)cMethodAssignment_3.eContents().get(0);
		
		//Call:
		//	action='call' control=[JvmType] '.' method=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//action='call' control=[JvmType] '.' method=ValidID
		public Group getGroup() { return cGroup; }
		
		//action='call'
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//'call'
		public Keyword getActionCallKeyword_0_0() { return cActionCallKeyword_0_0; }
		
		//control=[JvmType]
		public Assignment getControlAssignment_1() { return cControlAssignment_1; }
		
		//[JvmType]
		public CrossReference getControlJvmTypeCrossReference_1_0() { return cControlJvmTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getControlJvmTypeIDTerminalRuleCall_1_0_1() { return cControlJvmTypeIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//method=ValidID
		public Assignment getMethodAssignment_3() { return cMethodAssignment_3; }
		
		//ValidID
		public RuleCall getMethodValidIDParserRuleCall_3_0() { return cMethodValidIDParserRuleCall_3_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Feature:
		//	Property | Operation;
		@Override public ParserRule getRule() { return rule; }
		
		//Property | Operation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Property
		public RuleCall getPropertyParserRuleCall_0() { return cPropertyParserRuleCall_0; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Property:
		//	type=JvmTypeReference name=ValidID ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=JvmTypeReference name=ValidID ';'?
		public Group getGroup() { return cGroup; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cThrowsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExceptionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExceptionsJvmTypeReferenceParserRuleCall_6_1_0 = (RuleCall)cExceptionsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cExceptionsJvmTypeReferenceParserRuleCall_6_2_1_0 = (RuleCall)cExceptionsAssignment_6_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Operation:
		//	'op' type=JvmTypeReference name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		//	')' ('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'op' type=JvmTypeReference name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
		//('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)? ';'?
		public Group getGroup() { return cGroup; }
		
		//'op'
		public Keyword getOpKeyword_0() { return cOpKeyword_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_0_0; }
		
		//(',' params+=FullJvmFormalParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'throws'
		public Keyword getThrowsKeyword_6_0() { return cThrowsKeyword_6_0; }
		
		//exceptions+=JvmTypeReference
		public Assignment getExceptionsAssignment_6_1() { return cExceptionsAssignment_6_1; }
		
		//JvmTypeReference
		public RuleCall getExceptionsJvmTypeReferenceParserRuleCall_6_1_0() { return cExceptionsJvmTypeReferenceParserRuleCall_6_1_0; }
		
		//(',' exceptions+=JvmTypeReference)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//exceptions+=JvmTypeReference
		public Assignment getExceptionsAssignment_6_2_1() { return cExceptionsAssignment_6_2_1; }
		
		//JvmTypeReference
		public RuleCall getExceptionsJvmTypeReferenceParserRuleCall_6_2_1_0() { return cExceptionsJvmTypeReferenceParserRuleCall_6_2_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class TopicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Topic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTopicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Topic:
		//	'@topic' '(' name=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'@topic' '(' name=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'@topic'
		public Keyword getTopicKeyword_0() { return cTopicKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AgencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.etri.slice.tools.adl.Domainmodel.Agency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIpSTRINGTerminalRuleCall_4_0 = (RuleCall)cIpAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cPortKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cPortAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPortINTTerminalRuleCall_8_0 = (RuleCall)cPortAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Agency:
		//	'@agency' '(' 'ip' '=' ip=STRING ',' 'port' '=' port=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'@agency' '(' 'ip' '=' ip=STRING ',' 'port' '=' port=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'@agency'
		public Keyword getAgencyKeyword_0() { return cAgencyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'ip'
		public Keyword getIpKeyword_2() { return cIpKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//ip=STRING
		public Assignment getIpAssignment_4() { return cIpAssignment_4; }
		
		//STRING
		public RuleCall getIpSTRINGTerminalRuleCall_4_0() { return cIpSTRINGTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'port'
		public Keyword getPortKeyword_6() { return cPortKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//port=INT
		public Assignment getPortAssignment_8() { return cPortAssignment_8; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_8_0() { return cPortINTTerminalRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	
	
	private final DomainModelElements pDomainModel;
	private final AbstractElementElements pAbstractElement;
	private final DomainDeclarationElements pDomainDeclaration;
	private final ContextElements pContext;
	private final EventElements pEvent;
	private final EventBodyElements pEventBody;
	private final ExceptionElements pException;
	private final ControlElements pControl;
	private final AgentDeclarationElements pAgentDeclaration;
	private final RuleSetElements pRuleSet;
	private final BehaviorSetElements pBehaviorSet;
	private final BehaviorElements pBehavior;
	private final CommandSetElements pCommandSet;
	private final CommandElements pCommand;
	private final CommandContextElements pCommandContext;
	private final DataTypeElements pDataType;
	private final SituationElements pSituation;
	private final ActionElements pAction;
	private final PublishElements pPublish;
	private final NoOpElements pNoOp;
	private final CallElements pCall;
	private final FeatureElements pFeature;
	private final PropertyElements pProperty;
	private final OperationElements pOperation;
	private final TopicElements pTopic;
	private final AgencyElements pAgency;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public DomainmodelGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pDomainModel = new DomainModelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pDomainDeclaration = new DomainDeclarationElements();
		this.pContext = new ContextElements();
		this.pEvent = new EventElements();
		this.pEventBody = new EventBodyElements();
		this.pException = new ExceptionElements();
		this.pControl = new ControlElements();
		this.pAgentDeclaration = new AgentDeclarationElements();
		this.pRuleSet = new RuleSetElements();
		this.pBehaviorSet = new BehaviorSetElements();
		this.pBehavior = new BehaviorElements();
		this.pCommandSet = new CommandSetElements();
		this.pCommand = new CommandElements();
		this.pCommandContext = new CommandContextElements();
		this.pDataType = new DataTypeElements();
		this.pSituation = new SituationElements();
		this.pAction = new ActionElements();
		this.pPublish = new PublishElements();
		this.pNoOp = new NoOpElements();
		this.pCall = new CallElements();
		this.pFeature = new FeatureElements();
		this.pProperty = new PropertyElements();
		this.pOperation = new OperationElements();
		this.pTopic = new TopicElements();
		this.pAgency = new AgencyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.etri.slice.tools.adl.Domainmodel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//DomainModel:
	//	importSection=XImportSection?
	//	elements+=AbstractElement*;
	public DomainModelElements getDomainModelAccess() {
		return pDomainModel;
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}
	
	//AbstractElement:
	//	DomainDeclaration | Context | Event | Exception | Control | AgentDeclaration;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//DomainDeclaration:
	//	'domain' name=QualifiedName '{'
	//	elements+=AbstractElement*
	//	'}';
	public DomainDeclarationElements getDomainDeclarationAccess() {
		return pDomainDeclaration;
	}
	
	public ParserRule getDomainDeclarationRule() {
		return getDomainDeclarationAccess().getRule();
	}
	
	//Context:
	//	'context' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? '{'
	//	properties+=Property*
	//	'}';
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//Event:
	//	topic=Topic
	//	'event' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? '{'
	//	properties+=Property*
	//	'}';
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//EventBody:
	//	topic=Topic
	//	'event' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? '{'
	//	properties+=Property*
	//	'}';
	public EventBodyElements getEventBodyAccess() {
		return pEventBody;
	}
	
	public ParserRule getEventBodyRule() {
		return getEventBodyAccess().getRule();
	}
	
	//Exception:
	//	'exception' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? ';';
	public ExceptionElements getExceptionAccess() {
		return pException;
	}
	
	public ParserRule getExceptionRule() {
		return getExceptionAccess().getRule();
	}
	
	//Control:
	//	'control' name=ValidID ('extends' superTypes+=JvmParameterizedTypeReference (','
	//	superTypes+=JvmParameterizedTypeReference)*)? '{'
	//	features+=Feature*
	//	'}';
	public ControlElements getControlAccess() {
		return pControl;
	}
	
	public ParserRule getControlRule() {
		return getControlAccess().getRule();
	}
	
	//AgentDeclaration:
	//	agency=Agency
	//	'agent' name=ValidID '{'
	//	ruleSet=RuleSet
	//	behaviorSet=BehaviorSet
	//	commandSets+=CommandSet*
	//	'}';
	public AgentDeclarationElements getAgentDeclarationAccess() {
		return pAgentDeclaration;
	}
	
	public ParserRule getAgentDeclarationRule() {
		return getAgentDeclarationAccess().getRule();
	}
	
	//RuleSet:
	//	'hasRuleSet' name=ValidID '{'
	//	'group-id' group_id=STRING
	//	'artifact-id' artifact_id=STRING
	//	'}';
	public RuleSetElements getRuleSetAccess() {
		return pRuleSet;
	}
	
	public ParserRule getRuleSetRule() {
		return getRuleSetAccess().getRule();
	}
	
	//BehaviorSet:
	//	'hasBehaviors' '{'
	//	behaviors+=Behavior+
	//	'}';
	public BehaviorSetElements getBehaviorSetAccess() {
		return pBehaviorSet;
	}
	
	public ParserRule getBehaviorSetRule() {
		return getBehaviorSetAccess().getRule();
	}
	
	//Behavior:
	//	'behavior' name=STRING
	//	situation=Situation
	//	action=Action
	//	'end';
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}
	
	//CommandSet:
	//	'hasCommandsOf' control=JvmTypeReference '{'
	//	commands+=Command+
	//	'}';
	public CommandSetElements getCommandSetAccess() {
		return pCommandSet;
	}
	
	public ParserRule getCommandSetRule() {
		return getCommandSetAccess().getRule();
	}
	
	//Command:
	//	'command' name=ValidID '{'
	//	contexts+=CommandContext+
	//	'action' action=[JvmType] '.' method=ValidID
	//	'}';
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//CommandContext:
	//	'context' context=[JvmType] '.' property=ValidID;
	public CommandContextElements getCommandContextAccess() {
		return pCommandContext;
	}
	
	public ParserRule getCommandContextRule() {
		return getCommandContextAccess().getRule();
	}
	
	//DataType:
	//	Context | Event;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Situation:
	//	'on' types+=JvmTypeReference (',' types+=JvmTypeReference)*;
	public SituationElements getSituationAccess() {
		return pSituation;
	}
	
	public ParserRule getSituationRule() {
		return getSituationAccess().getRule();
	}
	
	//Action:
	//	'do' (Publish | Call | NoOp);
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Publish:
	//	action='publish' event=JvmTypeReference;
	public PublishElements getPublishAccess() {
		return pPublish;
	}
	
	public ParserRule getPublishRule() {
		return getPublishAccess().getRule();
	}
	
	//NoOp:
	//	action='no-op';
	public NoOpElements getNoOpAccess() {
		return pNoOp;
	}
	
	public ParserRule getNoOpRule() {
		return getNoOpAccess().getRule();
	}
	
	//Call:
	//	action='call' control=[JvmType] '.' method=ValidID;
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//Feature:
	//	Property | Operation;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//Property:
	//	type=JvmTypeReference name=ValidID ';'?;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Operation:
	//	'op' type=JvmTypeReference name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
	//	')' ('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)? ';'?;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Topic:
	//	'@topic' '(' name=STRING ')';
	public TopicElements getTopicAccess() {
		return pTopic;
	}
	
	public ParserRule getTopicRule() {
		return getTopicAccess().getRule();
	}
	
	//Agency:
	//	'@agency' '(' 'ip' '=' ip=STRING ',' 'port' '=' port=INT ')';
	public AgencyElements getAgencyAccess() {
		return pAgency;
	}
	
	public ParserRule getAgencyRule() {
		return getAgencyAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
