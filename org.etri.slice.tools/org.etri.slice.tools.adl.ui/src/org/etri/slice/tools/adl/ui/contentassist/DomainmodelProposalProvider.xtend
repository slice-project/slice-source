/*
 * generated by Xtext
 */
package org.etri.slice.tools.adl.ui.contentassist

import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.jface.viewers.ILabelProvider
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.common.types.JvmGenericType
import org.eclipse.xtext.common.types.TypesPackage
import org.eclipse.xtext.common.types.access.IJvmTypeProvider
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.etri.slice.tools.adl.domainmodel.Call
import org.etri.slice.tools.adl.domainmodel.Command
import org.etri.slice.tools.adl.domainmodel.CommandContext
import org.etri.slice.tools.adl.domainmodel.CommandSet
import org.etri.slice.tools.adl.domainmodel.Context
import org.etri.slice.tools.adl.domainmodel.Control
import org.etri.slice.tools.adl.domainmodel.Event
import org.etri.slice.tools.adl.domainmodel.Exception
import org.etri.slice.tools.adl.domainmodel.Operation
import org.etri.slice.tools.adl.domainmodel.Property
import org.etri.slice.tools.adl.domainmodel.Publish
import org.etri.slice.tools.adl.domainmodel.Situation
import org.etri.slice.tools.adl.generator.GeneratorUtils
import org.etri.slice.tools.adl.jvmmodel.CommonInterfaces
import org.etri.slice.tools.adl.utils.DomainnodeUtil
import org.eclipse.xtext.common.types.JvmOperation
import org.eclipse.xtext.common.types.JvmField
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.CrossReference

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class DomainmodelProposalProvider extends AbstractDomainmodelProposalProvider {

	@Inject extension DomainnodeUtil

	@Inject extension ILabelProvider labelProvider

	@Inject extension ITypesProposalProvider provider

	@Inject extension IJvmTypeProvider.Factory

	@Inject extension IQualifiedNameProvider

	@Inject extension GeneratorUtils

	override completeJvmParameterizedTypeReference_Type(EObject element, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		if (EcoreUtil2.getContainerOfType(element, Property) !== null) {
			System.out.println("element instanceof Property **********************" + (element instanceof Property));
		}

		switch element {
			Control: {
				val fqn = element.fullyQualifiedName.adaptToSlice("service").toString

				provider.createTypeProposals(
					this,
					context,
					TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE,
					new AcceptInterfaceFilter(fqn),
					acceptor
				)
			}
			Call, 
			CommandSet: {
				provider.createTypeProposals(
					this,
					context,
					TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE,
					new AcceptInterfaceFilter(),
					acceptor
				)
			}
			Situation: {
				val typeProvider = createTypeProvider(element.eResource.resourceSet)				
				val contextBase = typeProvider.findTypeByName(CommonInterfaces.CONTEXT_BASE);

				provider.createSubTypeProposals(contextBase, this, context,
					TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE,
					new AcceptableInstanceFilter(), acceptor)
					
				val eventBase = typeProvider.findTypeByName(CommonInterfaces.EVENT_BASE);

				provider.createSubTypeProposals(eventBase, this, context,
					TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE,
					new AcceptableInstanceFilter(), acceptor)
			}
			Context: {				
				val fqn = element.fullyQualifiedName.adaptToSlice("context").toString

				val typeProvider = createTypeProvider(element.eResource.resourceSet)
				val contextBase = typeProvider.findTypeByName(CommonInterfaces.CONTEXT_BASE);

				provider.createSubTypeProposals(contextBase, this, context,
					TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE,
					new AcceptableSuperTypeFilter(fqn, CommonInterfaces.CONTEXT_BASE), acceptor)
			}
			Publish: {
				val typeProvider = createTypeProvider(element.eResource.resourceSet)
				val eventBase = typeProvider.findTypeByName(CommonInterfaces.EVENT_BASE);

				provider.createSubTypeProposals(eventBase, this, context,
					TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE,
					new AcceptableInstanceFilter(), acceptor)
			}
			Event: {
				System.out.println("Event .......................");
				System.out.println("Event element = " + element);
				System.out.println("Event assignment feature = " + assignment.feature);
				System.out.println("Event context rootModel = " + context.rootModel);
				System.out.println("Event context = " + context);

				val fqn = element.fullyQualifiedName.adaptToSlice("event").toString

				val typeProvider = createTypeProvider(element.eResource.resourceSet)
				val eventBase = typeProvider.findTypeByName(CommonInterfaces.EVENT_BASE);

				provider.createSubTypeProposals(eventBase, this, context,
					TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE,
					new AcceptableSuperTypeFilter(fqn, CommonInterfaces.EVENT_BASE), acceptor)
			}
			Exception: {
				val fqn = element.fullyQualifiedName.adaptToSlice("").toString

				val typeProvider = createTypeProvider(element.eResource.resourceSet)
				val exceptionBase = typeProvider.findTypeByName(CommonInterfaces.EXCEPTION_INTERFACE);

				provider.createSubTypeProposals(exceptionBase, this, context,
					TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE,
					new AcceptableSuperTypeFilter(fqn, CommonInterfaces.EXCEPTION_INTERFACE), acceptor)
			}
			default:
				super.completeJvmParameterizedTypeReference_Type(element, assignment, context, acceptor)
		}
	}

//	override completeProperty_Type(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		acceptor.accept(
//							createCompletionProposal("ABC", 
//								"ABC" + ":" + "ABC" + " - " + "ddd", 
//								labelProvider.getImage(model), context
//							));
//	}
	/**
	 * AgentDeclaration/CommandSet/Context
	 */
	override completeCommandContext_Context(EObject element, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {

		System.out.println("completeCommandContext_Context .......................");

//		if (element instanceof CommandContext) {
//			(element.context as JvmGenericType).allFeatures.forEach [ property | 
//					acceptor.accept(
//							createCompletionProposal(property.identifier, property.identifier + ":" + property.fullyQualifiedName + " - " + element.context.identifier, getImage(property), context));
//			]
//		}
//		super.completeCommandContext_Context(element, assignment, context, acceptor);
		val typeProvider = createTypeProvider(element.eResource.resourceSet)
		val contextBase = typeProvider.findTypeByName(CommonInterfaces.CONTEXT_BASE);

		provider.createSubTypeProposals(contextBase, this, context,
			TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE, new AcceptableInstanceFilter(), acceptor)

	}

	override completeCall_Control(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		provider.createTypeProposals(
					this,
					context,
					TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE,
					new AcceptInterfaceFilter(""),
					acceptor
				)
	}
	
	/**
	 * AgentDeclaration/CommandSet/Context/property
	 */
	override completeCommandContext_Property(EObject element, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {

		System.out.println("completeCommandContext_Property .......................");

		if (element instanceof CommandContext) {
			(element.context as JvmGenericType).allFeatures.forEach [ feature |
				switch feature
				{
					JvmField:
					{
						acceptor.accept(
							createCompletionProposal(feature.simpleName,
								feature.simpleName + " - " + element.context.identifier, getImage(feature), context));
					}
				}						
			]
		}
	}

	override completeCommand_Action(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		provider.createTypeProposals(
			this,
			context,
			TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE,
			new AcceptInterfaceFilter(""),
			acceptor
		)
	}
	
	/**
	 * AgentDeclaration/CommandSet/Command/method
	 */
	override completeCommand_Method(EObject element, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {

		if (element instanceof Command) {
				(element.action as JvmGenericType).allFeatures.forEach [ feature |
				{
					switch feature
					{
						JvmOperation:
						{
							acceptor.accept(
							createCompletionProposal(feature.simpleName, feature.simpleName + " - " + element.action.identifier, getImage(feature), context));
						}
						
						JvmField:
						{
							val setter = "set" + feature.simpleName.toFirstUpper
							
							acceptor.accept(
								createCompletionProposal(setter, setter + " - " + element.action.simpleName, getImage(feature), context));		
						}						
					}

				}
			]
		}
	}

	/**
	 * AgentDeclaration/BehaviorSet/Behavior/Action/Call/method
	 */
	override completeCall_Method(EObject element, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
			
		if (element instanceof Call) {
			(element.control as JvmGenericType).allFeatures.forEach [ feature |
			{
				switch feature{
					JvmOperation:
					{
						acceptor.accept(
							createCompletionProposal(feature.simpleName, feature.simpleName + " - Operation", getImage(feature), context));
					}
					
					JvmField:
					{
						val setter = "set" + feature.simpleName.toFirstUpper
						
						acceptor.accept(
							createCompletionProposal(setter, setter + " - Field", getImage(feature), context));	
					}
				}	
			}
			]
		}
	}

}
